/*
 * This class is an auto-generated source file for a HAPI
 * HL7 v2.x standard structure class.
 *
 * For more information, visit: http://hl7api.sourceforge.net/
 * 
 * The contents of this file are subject to the Mozilla Public License Version 1.1 
 * (the "License"); you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/ 
 * Software distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the 
 * specific language governing rights and limitations under the License. 
 * 
 * The Original Code is "[file_name]".  Description: 
 * "[one_line_description]" 
 * 
 * The Initial Developer of the Original Code is University Health Network. Copyright (C) 
 * 2012.  All Rights Reserved. 
 * 
 * Contributor(s): ______________________________________. 
 * 
 * Alternatively, the contents of this file may be used under the terms of the 
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are 
 * applicable instead of those above.  If you wish to allow use of your version of this 
 * file only under the terms of the GPL and not to allow others to use your version 
 * of this file under the MPL, indicate your decision by deleting  the provisions above 
 * and replace  them with the notice and other provisions required by the GPL License.  
 * If you do not delete the provisions above, a recipient may use your version of 
 * this file under either the MPL or the GPL. 
 * 
 */


package ${basePackageName}segment;

// import ${basePackageName}group.*;
#foreach ( $datatypePackage in $datatypePackages )
import ${datatypePackage}.*;
#end
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.parser.ModelClassFactory;
import ca.uhn.hl7v2.parser.DefaultModelClassFactory;
import ca.uhn.hl7v2.model.AbstractMessage;
import ca.uhn.hl7v2.model.Group;
import ca.uhn.hl7v2.model.Type;
import ca.uhn.hl7v2.model.AbstractSegment;
import ca.uhn.hl7v2.model.Varies;

#if ( ! ${typeDescription} )
	#set ( $typeDescFmt = "" )
#else
	#set ( $typeDescFmt = " (" + ${typeDescription} + ")" )
#end

/**
 *<p>Represents an HL7 ${segmentName} message segment${typeDescFmt}. 
 * This segment has the following fields:</p>
 * <ul>
#foreach ( $element in $elements )
 #if (${element.isWithdrawn()})
  #set ($reqd = "withdrawn")
  #set ($rept = "")
 #else
     #if (${element.isRequired()})
      #set ($reqd = "")
     #else
      #set ($reqd = "optional")
     #end
     #if (${element.isRepeating()})
      #set ($rept = "repeating")
     #else
      #set ($rept = "")
     #end
 #end
 * <li>${segmentName}-${foreach.count}: ${element.desc} (${element.alternateType}) <b>$reqd $rept</b>
#end
 * </ul>
 */
@SuppressWarnings("unused")
public class ${segmentName} extends AbstractSegment {

    /** 
     * Creates a new ${segmentName} segment
     */
    public ${segmentName}(Group parent, ModelClassFactory factory) {
       super(parent, factory);
       init(factory);
    }

    private void init(ModelClassFactory factory) {
#if ( $elements.size() > 0 )
       try {
#foreach ( $element in $elements)
    #if (${element.required})
      #set ($reqd = "true")
    #else
      #set ($reqd = "false")
    #end
    #if ($element.repeating)
      #set ($rept = "true")
    #else
      #set ($rept = "false")
    #end
    #if (!${element.idType})
      #set ($constructorArgs = "new Object[]{ getMessage() }")
    #else
      #if (${element.hasTableNamespace})
        #set ($constructorArgs = "new Object[]{ getMessage(), ${hl7VersionInQuotes}, ${element.tableNamespaceInQuotes}, ${element.table} }")
      #else
        #set ($constructorArgs = "new Object[]{ getMessage(), ${element.table} }")
      #end
    #end
          this.add(${element.alternateType}.class, $reqd, ${element.repetitions}, ${element.length}, ${constructorArgs}, "${element.descEscaped}");
#end
       } catch(HL7Exception e) {
          log.error("Unexpected error creating ${segmentName} - this is probably a bug in the source code generator.", e);
       }
#end
    }

#foreach ( $element in $elements )
#if ($element.repeating)
    /**
     * Returns all repetitions of ${element.desc} (${segmentName}-${foreach.count}).
     */
    public ${element.alternateType}[] get${element.accessorName}() {
    	return this.getTypedField(${foreach.count}, new ${element.alternateType}[0]);
    }

    /**
     * Returns all repetitions of ${element.desc} (${segmentName}-${foreach.count}).
     */
    public ${element.alternateType}[] get${element.alternateAccessorName}() {
    	return this.getTypedField(${foreach.count}, new ${element.alternateType}[0]);
    }

    /**
     * Returns a count of the current number of repetitions of ${element.desc} (${segmentName}-${foreach.count}).
     * This method does not create a repetition, so if no repetitions have currently been defined or accessed,
     * it will return zero.
     */
    public int get${element.accessorName}Reps() {
    	return this.getReps(${foreach.count});
    }

    /**
     * Returns a specific repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" - creates it if necessary
     *
     * @param rep The repetition index (0-indexed)
     */
    public ${element.alternateType} get${element.accessorName}(int rep) { 
		return this.getTypedField(${foreach.count}, rep, ${element.alternateType}.class);
    }

    /**
     * Returns a specific repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" - creates it if necessary
     *
     * @param rep The repetition index (0-indexed)
     */
    public ${element.alternateType} get${element.alternateAccessorName}(int rep) { 
		return this.getTypedField(${foreach.count}, rep, ${element.alternateType}.class);
    }

    /**
     * Returns a count of the current number of repetitions of ${element.desc} (${segmentName}-${foreach.count}).
     * This method does not create a repetition, so if no repetitions have currently been defined or accessed,
     * it will return zero.
     */
    public int get${element.alternateAccessorName}Reps() {
    	return this.getReps(${foreach.count});
    }

    /**
     * Inserts a repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" at a specific index
     *
     * @param rep The repetition index (0-indexed)
     * @throws HL7Exception If the rep is invalid (below 0, or too high for the allowable repetitions)
     */
    public ${element.alternateType} insert${element.accessorName}(int rep) throws HL7Exception { 
        return ($element.alternateType) super.insertRepetition(${foreach.count}, rep);
    }

    /**
     * Inserts a repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" at a specific index
     *
     * @param rep The repetition index (0-indexed)
     * @throws HL7Exception If the rep is invalid (below 0, or too high for the allowable repetitions)
     */
    public ${element.alternateType} insert${element.alternateAccessorName}(int rep) throws HL7Exception { 
        return ($element.alternateType) super.insertRepetition(${foreach.count}, rep);
    }

    /**
     * Removes a repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" at a specific index
     *
     * @param rep The repetition index (0-indexed)
     * @throws HL7Exception If the rep is invalid (below 0, or too high for the allowable repetitions)
     */
    public ${element.alternateType} remove${element.accessorName}(int rep) throws HL7Exception { 
        return ($element.alternateType) super.removeRepetition(${foreach.count}, rep);
    }

    /**
     * Removes a repetition of
     * ${segmentName}-${foreach.count}: "${element.desc}" at a specific index
     *
     * @param rep The repetition index (0-indexed)
     * @throws HL7Exception If the rep is invalid (below 0, or too high for the allowable repetitions)
     */
    public ${element.alternateType} remove${element.alternateAccessorName}(int rep) throws HL7Exception { 
        return ($element.alternateType) super.removeRepetition(${foreach.count}, rep);
    }

#else

    /**
     * Returns
     * ${segmentName}-${foreach.count}: "${element.desc}" - creates it if necessary
     */
    public $element.alternateType get${element.accessorName}() { 
		return this.getTypedField(${foreach.count}, 0);
    }
    
    /**
     * Returns
     * ${segmentName}-${foreach.count}: "${element.desc}" - creates it if necessary
     */
    public $element.alternateType get${element.alternateAccessorName}() { 
		return this.getTypedField(${foreach.count}, 0);
    }

#end

#end

    /** {@inheritDoc} */   
    protected Type createNewTypeWithoutReflection(int field) {
       switch (field) {
#foreach ( $element in $elements )
#set ( $idx = ${foreach.count} - 1 )
#if ( $element.alternateType == "Varies" )
          case ${idx}: return new Varies(getMessage());
#elseif ( $element.idType && $element.hasTableNamespace)
          case ${idx}: return new ${element.alternateType}(getMessage(), ${hl7VersionInQuotes}, ${element.tableNamespaceInQuotes}, ${element.table});
#elseif ( $element.idType )
          case ${idx}: return new ${element.alternateType}(getMessage(), ${element.table} );
#else
          case ${idx}: return new ${element.alternateType}(getMessage());
#end
#end       
          default: return null;
       }
   }
}